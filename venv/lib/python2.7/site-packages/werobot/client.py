# -*- coding: utf-8 -*-

class Client(object):
    
    def get_access_token(self):
        """
        判断现有的token是否过期。
        用户需要多进程或者多机部署可以手动重写这个函数
        来自定义token的存储，刷新策略。

        :return: 返回token
        """
	#if self._token:
        #    now = time.time()
        #    if self.token_expires_at - now > 60:
        #        return self._token
        #json = self.grant_token()
        #self._token = json["access_token"]
        #self.token_expires_at = int(time.time()) + json["expires_in"]
        #return self._token

	weapitoken = "yourapitoken"
	url4p = "https://yoururl/weapis/system/" + weapitoken
        url4g = url4p + '?keyword=accesstoken'
        r = requests.get(url4g).json()
        token = r['value']
        expires = int(r['ttl'])
        if (r['keyword'] == 'null'):
            r = requests.post(url4p, json = {'keyword': 'accesstoken', 'value': 0, 'ttl': 0})
        now = time.time()
        if expires - now > 60:
            return token
        json = self.grant_token()
        r = requests.put(url4p, json = {'keyword': 'accesstoken', 'value': json['access_token'], 'ttl': int(time.time()) + int(json['expires_in'])})
        return json['access_token']